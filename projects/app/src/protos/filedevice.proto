syntax = "proto3";
package rageam.remote;

enum FileSearchIncludeFlags // Matches rageam::file::FileSearchInclude
{
	None = 0x0;
	File = 0x1;
	Archive = 0x2;
	Directory = 0x4;
	Resource = 0x8;
	All = 0xF;
}

message FileScanRequest { string Path = 1; }
message FileScanResponse {}

message FileSearchRequest
{
	string Path = 1;
	string Pattern = 2;
	bool Recurse = 3;
	int32 IncludeFlags = 4;
}
// Array of file entries, see definition in C++ server code
// This is much faster (nearly 100x) than streaming entry by entry
message FileSearchResponse { bytes FileData = 1; }

message FileExistsRequest { string Path = 1; }
message FileExistResponse { bool Value = 1; }

message DirectoryEmptyRequest { string Path = 1; }
message DirectoryEmptyResponse { bool Value = 1; }

service FileDevice
{
	// Pre-loads all packfiles (.RPF) in specified directory recursively, including nested archives
	rpc ScanDirectory(FileScanRequest) returns (FileScanResponse) {}
	
	// Search algorithm that behaves the same way as search in any file explorer - performs search in specified directory with search pattern,
	// pattern might be in glob format ('*.ydr' / '*' / '*.y??'). If glob format is not specified, check that entry name string contains pattern is used instead
	rpc Search(FileSearchRequest) returns (stream FileSearchResponse) {}

	// Could be file or directory, including entries in packfiles
	rpc IsFileExists(FileExistsRequest) returns (FileExistResponse) {}

	// Could be directory or packfile, returns true if there's at least one entry
	rpc IsDirectoryEmpty(DirectoryEmptyRequest) returns (DirectoryEmptyResponse) {}
}
