// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filedevice.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_filedevice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_filedevice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_filedevice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_filedevice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_filedevice_2eproto;
namespace rageam {
namespace remote {
class FileExistResponse;
struct FileExistResponseDefaultTypeInternal;
extern FileExistResponseDefaultTypeInternal _FileExistResponse_default_instance_;
class FileExistsRequest;
struct FileExistsRequestDefaultTypeInternal;
extern FileExistsRequestDefaultTypeInternal _FileExistsRequest_default_instance_;
class FileScanRequest;
struct FileScanRequestDefaultTypeInternal;
extern FileScanRequestDefaultTypeInternal _FileScanRequest_default_instance_;
class FileScanResponse;
struct FileScanResponseDefaultTypeInternal;
extern FileScanResponseDefaultTypeInternal _FileScanResponse_default_instance_;
class FileSearchRequest;
struct FileSearchRequestDefaultTypeInternal;
extern FileSearchRequestDefaultTypeInternal _FileSearchRequest_default_instance_;
class FileSearchResponse;
struct FileSearchResponseDefaultTypeInternal;
extern FileSearchResponseDefaultTypeInternal _FileSearchResponse_default_instance_;
}  // namespace remote
}  // namespace rageam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rageam {
namespace remote {
enum FileSearchIncludeFlags : int {
  None = 0,
  File = 1,
  Archive = 2,
  Directory = 4,
  Resource = 8,
  All = 15,
  FileSearchIncludeFlags_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileSearchIncludeFlags_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileSearchIncludeFlags_IsValid(int value);
extern const uint32_t FileSearchIncludeFlags_internal_data_[];
constexpr FileSearchIncludeFlags FileSearchIncludeFlags_MIN = static_cast<FileSearchIncludeFlags>(0);
constexpr FileSearchIncludeFlags FileSearchIncludeFlags_MAX = static_cast<FileSearchIncludeFlags>(15);
constexpr int FileSearchIncludeFlags_ARRAYSIZE = 15 + 1;
const ::google::protobuf::EnumDescriptor*
FileSearchIncludeFlags_descriptor();
template <typename T>
const std::string& FileSearchIncludeFlags_Name(T value) {
  static_assert(std::is_same<T, FileSearchIncludeFlags>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileSearchIncludeFlags_Name().");
  return FileSearchIncludeFlags_Name(static_cast<FileSearchIncludeFlags>(value));
}
template <>
inline const std::string& FileSearchIncludeFlags_Name(FileSearchIncludeFlags value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FileSearchIncludeFlags_descriptor,
                                                 0, 15>(
      static_cast<int>(value));
}
inline bool FileSearchIncludeFlags_Parse(absl::string_view name, FileSearchIncludeFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileSearchIncludeFlags>(
      FileSearchIncludeFlags_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FileSearchResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rageam.remote.FileSearchResponse) */ {
 public:
  inline FileSearchResponse() : FileSearchResponse(nullptr) {}
  ~FileSearchResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileSearchResponse(::google::protobuf::internal::ConstantInitialized);

  inline FileSearchResponse(const FileSearchResponse& from)
      : FileSearchResponse(nullptr, from) {}
  FileSearchResponse(FileSearchResponse&& from) noexcept
    : FileSearchResponse() {
    *this = ::std::move(from);
  }

  inline FileSearchResponse& operator=(const FileSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSearchResponse& operator=(FileSearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSearchResponse* internal_default_instance() {
    return reinterpret_cast<const FileSearchResponse*>(
               &_FileSearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileSearchResponse& a, FileSearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSearchResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSearchResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSearchResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSearchResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileSearchResponse& from) {
    FileSearchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileSearchResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rageam.remote.FileSearchResponse";
  }
  protected:
  explicit FileSearchResponse(::google::protobuf::Arena* arena);
  FileSearchResponse(::google::protobuf::Arena* arena, const FileSearchResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDataFieldNumber = 1,
  };
  // bytes FileData = 1;
  void clear_filedata() ;
  const std::string& filedata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filedata(Arg_&& arg, Args_... args);
  std::string* mutable_filedata();
  PROTOBUF_NODISCARD std::string* release_filedata();
  void set_allocated_filedata(std::string* value);

  private:
  const std::string& _internal_filedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filedata(
      const std::string& value);
  std::string* _internal_mutable_filedata();

  public:
  // @@protoc_insertion_point(class_scope:rageam.remote.FileSearchResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr filedata_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filedevice_2eproto;
};// -------------------------------------------------------------------

class FileSearchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rageam.remote.FileSearchRequest) */ {
 public:
  inline FileSearchRequest() : FileSearchRequest(nullptr) {}
  ~FileSearchRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileSearchRequest(::google::protobuf::internal::ConstantInitialized);

  inline FileSearchRequest(const FileSearchRequest& from)
      : FileSearchRequest(nullptr, from) {}
  FileSearchRequest(FileSearchRequest&& from) noexcept
    : FileSearchRequest() {
    *this = ::std::move(from);
  }

  inline FileSearchRequest& operator=(const FileSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSearchRequest& operator=(FileSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSearchRequest* internal_default_instance() {
    return reinterpret_cast<const FileSearchRequest*>(
               &_FileSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileSearchRequest& a, FileSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSearchRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSearchRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSearchRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileSearchRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileSearchRequest& from) {
    FileSearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileSearchRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rageam.remote.FileSearchRequest";
  }
  protected:
  explicit FileSearchRequest(::google::protobuf::Arena* arena);
  FileSearchRequest(::google::protobuf::Arena* arena, const FileSearchRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kPatternFieldNumber = 2,
    kRecurseFieldNumber = 3,
    kIncludeFlagsFieldNumber = 4,
  };
  // string Path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string Pattern = 2;
  void clear_pattern() ;
  const std::string& pattern() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pattern(Arg_&& arg, Args_... args);
  std::string* mutable_pattern();
  PROTOBUF_NODISCARD std::string* release_pattern();
  void set_allocated_pattern(std::string* value);

  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(
      const std::string& value);
  std::string* _internal_mutable_pattern();

  public:
  // bool Recurse = 3;
  void clear_recurse() ;
  bool recurse() const;
  void set_recurse(bool value);

  private:
  bool _internal_recurse() const;
  void _internal_set_recurse(bool value);

  public:
  // int32 IncludeFlags = 4;
  void clear_includeflags() ;
  ::int32_t includeflags() const;
  void set_includeflags(::int32_t value);

  private:
  ::int32_t _internal_includeflags() const;
  void _internal_set_includeflags(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rageam.remote.FileSearchRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr pattern_;
    bool recurse_;
    ::int32_t includeflags_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filedevice_2eproto;
};// -------------------------------------------------------------------

class FileScanResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rageam.remote.FileScanResponse) */ {
 public:
  inline FileScanResponse() : FileScanResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileScanResponse(::google::protobuf::internal::ConstantInitialized);

  inline FileScanResponse(const FileScanResponse& from)
      : FileScanResponse(nullptr, from) {}
  FileScanResponse(FileScanResponse&& from) noexcept
    : FileScanResponse() {
    *this = ::std::move(from);
  }

  inline FileScanResponse& operator=(const FileScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileScanResponse& operator=(FileScanResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileScanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileScanResponse* internal_default_instance() {
    return reinterpret_cast<const FileScanResponse*>(
               &_FileScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileScanResponse& a, FileScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileScanResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileScanResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileScanResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileScanResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FileScanResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FileScanResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rageam.remote.FileScanResponse";
  }
  protected:
  explicit FileScanResponse(::google::protobuf::Arena* arena);
  FileScanResponse(::google::protobuf::Arena* arena, const FileScanResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rageam.remote.FileScanResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_filedevice_2eproto;
};// -------------------------------------------------------------------

class FileScanRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rageam.remote.FileScanRequest) */ {
 public:
  inline FileScanRequest() : FileScanRequest(nullptr) {}
  ~FileScanRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileScanRequest(::google::protobuf::internal::ConstantInitialized);

  inline FileScanRequest(const FileScanRequest& from)
      : FileScanRequest(nullptr, from) {}
  FileScanRequest(FileScanRequest&& from) noexcept
    : FileScanRequest() {
    *this = ::std::move(from);
  }

  inline FileScanRequest& operator=(const FileScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileScanRequest& operator=(FileScanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileScanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileScanRequest* internal_default_instance() {
    return reinterpret_cast<const FileScanRequest*>(
               &_FileScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileScanRequest& a, FileScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileScanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileScanRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileScanRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileScanRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileScanRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileScanRequest& from) {
    FileScanRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileScanRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rageam.remote.FileScanRequest";
  }
  protected:
  explicit FileScanRequest(::google::protobuf::Arena* arena);
  FileScanRequest(::google::protobuf::Arena* arena, const FileScanRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string Path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:rageam.remote.FileScanRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filedevice_2eproto;
};// -------------------------------------------------------------------

class FileExistsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rageam.remote.FileExistsRequest) */ {
 public:
  inline FileExistsRequest() : FileExistsRequest(nullptr) {}
  ~FileExistsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileExistsRequest(::google::protobuf::internal::ConstantInitialized);

  inline FileExistsRequest(const FileExistsRequest& from)
      : FileExistsRequest(nullptr, from) {}
  FileExistsRequest(FileExistsRequest&& from) noexcept
    : FileExistsRequest() {
    *this = ::std::move(from);
  }

  inline FileExistsRequest& operator=(const FileExistsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileExistsRequest& operator=(FileExistsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileExistsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileExistsRequest* internal_default_instance() {
    return reinterpret_cast<const FileExistsRequest*>(
               &_FileExistsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileExistsRequest& a, FileExistsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileExistsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileExistsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileExistsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileExistsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileExistsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileExistsRequest& from) {
    FileExistsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileExistsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rageam.remote.FileExistsRequest";
  }
  protected:
  explicit FileExistsRequest(::google::protobuf::Arena* arena);
  FileExistsRequest(::google::protobuf::Arena* arena, const FileExistsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string Path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:rageam.remote.FileExistsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filedevice_2eproto;
};// -------------------------------------------------------------------

class FileExistResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rageam.remote.FileExistResponse) */ {
 public:
  inline FileExistResponse() : FileExistResponse(nullptr) {}
  ~FileExistResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileExistResponse(::google::protobuf::internal::ConstantInitialized);

  inline FileExistResponse(const FileExistResponse& from)
      : FileExistResponse(nullptr, from) {}
  FileExistResponse(FileExistResponse&& from) noexcept
    : FileExistResponse() {
    *this = ::std::move(from);
  }

  inline FileExistResponse& operator=(const FileExistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileExistResponse& operator=(FileExistResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileExistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileExistResponse* internal_default_instance() {
    return reinterpret_cast<const FileExistResponse*>(
               &_FileExistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileExistResponse& a, FileExistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileExistResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileExistResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileExistResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileExistResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileExistResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileExistResponse& from) {
    FileExistResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileExistResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rageam.remote.FileExistResponse";
  }
  protected:
  explicit FileExistResponse(::google::protobuf::Arena* arena);
  FileExistResponse(::google::protobuf::Arena* arena, const FileExistResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool Value = 1;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:rageam.remote.FileExistResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filedevice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileScanRequest

// string Path = 1;
inline void FileScanRequest::clear_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& FileScanRequest::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rageam.remote.FileScanRequest.Path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileScanRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rageam.remote.FileScanRequest.Path)
}
inline std::string* FileScanRequest::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:rageam.remote.FileScanRequest.Path)
  return _s;
}
inline const std::string& FileScanRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void FileScanRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArena());
}
inline std::string* FileScanRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* FileScanRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rageam.remote.FileScanRequest.Path)
  return _impl_.path_.Release();
}
inline void FileScanRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rageam.remote.FileScanRequest.Path)
}

// -------------------------------------------------------------------

// FileScanResponse

// -------------------------------------------------------------------

// FileSearchRequest

// string Path = 1;
inline void FileSearchRequest::clear_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& FileSearchRequest::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rageam.remote.FileSearchRequest.Path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileSearchRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rageam.remote.FileSearchRequest.Path)
}
inline std::string* FileSearchRequest::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:rageam.remote.FileSearchRequest.Path)
  return _s;
}
inline const std::string& FileSearchRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void FileSearchRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArena());
}
inline std::string* FileSearchRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* FileSearchRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rageam.remote.FileSearchRequest.Path)
  return _impl_.path_.Release();
}
inline void FileSearchRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rageam.remote.FileSearchRequest.Path)
}

// string Pattern = 2;
inline void FileSearchRequest::clear_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pattern_.ClearToEmpty();
}
inline const std::string& FileSearchRequest::pattern() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rageam.remote.FileSearchRequest.Pattern)
  return _internal_pattern();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileSearchRequest::set_pattern(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pattern_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rageam.remote.FileSearchRequest.Pattern)
}
inline std::string* FileSearchRequest::mutable_pattern() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:rageam.remote.FileSearchRequest.Pattern)
  return _s;
}
inline const std::string& FileSearchRequest::_internal_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pattern_.Get();
}
inline void FileSearchRequest::_internal_set_pattern(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pattern_.Set(value, GetArena());
}
inline std::string* FileSearchRequest::_internal_mutable_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pattern_.Mutable( GetArena());
}
inline std::string* FileSearchRequest::release_pattern() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rageam.remote.FileSearchRequest.Pattern)
  return _impl_.pattern_.Release();
}
inline void FileSearchRequest::set_allocated_pattern(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pattern_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pattern_.IsDefault()) {
          _impl_.pattern_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rageam.remote.FileSearchRequest.Pattern)
}

// bool Recurse = 3;
inline void FileSearchRequest::clear_recurse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recurse_ = false;
}
inline bool FileSearchRequest::recurse() const {
  // @@protoc_insertion_point(field_get:rageam.remote.FileSearchRequest.Recurse)
  return _internal_recurse();
}
inline void FileSearchRequest::set_recurse(bool value) {
  _internal_set_recurse(value);
  // @@protoc_insertion_point(field_set:rageam.remote.FileSearchRequest.Recurse)
}
inline bool FileSearchRequest::_internal_recurse() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recurse_;
}
inline void FileSearchRequest::_internal_set_recurse(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.recurse_ = value;
}

// int32 IncludeFlags = 4;
inline void FileSearchRequest::clear_includeflags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.includeflags_ = 0;
}
inline ::int32_t FileSearchRequest::includeflags() const {
  // @@protoc_insertion_point(field_get:rageam.remote.FileSearchRequest.IncludeFlags)
  return _internal_includeflags();
}
inline void FileSearchRequest::set_includeflags(::int32_t value) {
  _internal_set_includeflags(value);
  // @@protoc_insertion_point(field_set:rageam.remote.FileSearchRequest.IncludeFlags)
}
inline ::int32_t FileSearchRequest::_internal_includeflags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.includeflags_;
}
inline void FileSearchRequest::_internal_set_includeflags(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.includeflags_ = value;
}

// -------------------------------------------------------------------

// FileSearchResponse

// bytes FileData = 1;
inline void FileSearchResponse::clear_filedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filedata_.ClearToEmpty();
}
inline const std::string& FileSearchResponse::filedata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rageam.remote.FileSearchResponse.FileData)
  return _internal_filedata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileSearchResponse::set_filedata(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filedata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rageam.remote.FileSearchResponse.FileData)
}
inline std::string* FileSearchResponse::mutable_filedata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filedata();
  // @@protoc_insertion_point(field_mutable:rageam.remote.FileSearchResponse.FileData)
  return _s;
}
inline const std::string& FileSearchResponse::_internal_filedata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filedata_.Get();
}
inline void FileSearchResponse::_internal_set_filedata(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filedata_.Set(value, GetArena());
}
inline std::string* FileSearchResponse::_internal_mutable_filedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filedata_.Mutable( GetArena());
}
inline std::string* FileSearchResponse::release_filedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rageam.remote.FileSearchResponse.FileData)
  return _impl_.filedata_.Release();
}
inline void FileSearchResponse::set_allocated_filedata(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filedata_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filedata_.IsDefault()) {
          _impl_.filedata_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rageam.remote.FileSearchResponse.FileData)
}

// -------------------------------------------------------------------

// FileExistsRequest

// string Path = 1;
inline void FileExistsRequest::clear_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& FileExistsRequest::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rageam.remote.FileExistsRequest.Path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileExistsRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rageam.remote.FileExistsRequest.Path)
}
inline std::string* FileExistsRequest::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:rageam.remote.FileExistsRequest.Path)
  return _s;
}
inline const std::string& FileExistsRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void FileExistsRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArena());
}
inline std::string* FileExistsRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* FileExistsRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rageam.remote.FileExistsRequest.Path)
  return _impl_.path_.Release();
}
inline void FileExistsRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rageam.remote.FileExistsRequest.Path)
}

// -------------------------------------------------------------------

// FileExistResponse

// bool Value = 1;
inline void FileExistResponse::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = false;
}
inline bool FileExistResponse::value() const {
  // @@protoc_insertion_point(field_get:rageam.remote.FileExistResponse.Value)
  return _internal_value();
}
inline void FileExistResponse::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:rageam.remote.FileExistResponse.Value)
}
inline bool FileExistResponse::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void FileExistResponse::_internal_set_value(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
}  // namespace rageam


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::rageam::remote::FileSearchIncludeFlags> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rageam::remote::FileSearchIncludeFlags>() {
  return ::rageam::remote::FileSearchIncludeFlags_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_filedevice_2eproto_2epb_2eh
