// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: filedevice.proto

#include "filedevice.pb.h"
#include "filedevice.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace rageam {
namespace remote {

static const char* FileDevice_method_names[] = {
  "/rageam.remote.FileDevice/ScanDirectory",
  "/rageam.remote.FileDevice/Search",
  "/rageam.remote.FileDevice/IsFileExists",
};

std::unique_ptr< FileDevice::Stub> FileDevice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileDevice::Stub> stub(new FileDevice::Stub(channel, options));
  return stub;
}

FileDevice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ScanDirectory_(FileDevice_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(FileDevice_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_IsFileExists_(FileDevice_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileDevice::Stub::ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::rageam::remote::FileScanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanDirectory_, context, request, response);
}

void FileDevice::Stub::async::ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanDirectory_, context, request, response, std::move(f));
}

void FileDevice::Stub::async::ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>* FileDevice::Stub::PrepareAsyncScanDirectoryRaw(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rageam::remote::FileScanResponse, ::rageam::remote::FileScanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>* FileDevice::Stub::AsyncScanDirectoryRaw(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::rageam::remote::FileSearchResponse>* FileDevice::Stub::SearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::rageam::remote::FileSearchResponse>::Create(channel_.get(), rpcmethod_Search_, context, request);
}

void FileDevice::Stub::async::Search(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest* request, ::grpc::ClientReadReactor< ::rageam::remote::FileSearchResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::rageam::remote::FileSearchResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>* FileDevice::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rageam::remote::FileSearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>* FileDevice::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rageam::remote::FileSearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false, nullptr);
}

::grpc::Status FileDevice::Stub::IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::rageam::remote::FileExistResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsFileExists_, context, request, response);
}

void FileDevice::Stub::async::IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsFileExists_, context, request, response, std::move(f));
}

void FileDevice::Stub::async::IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsFileExists_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>* FileDevice::Stub::PrepareAsyncIsFileExistsRaw(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rageam::remote::FileExistResponse, ::rageam::remote::FileExistsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsFileExists_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>* FileDevice::Stub::AsyncIsFileExistsRaw(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsFileExistsRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileDevice::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileDevice_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileDevice::Service, ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileDevice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rageam::remote::FileScanRequest* req,
             ::rageam::remote::FileScanResponse* resp) {
               return service->ScanDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileDevice_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileDevice::Service, ::rageam::remote::FileSearchRequest, ::rageam::remote::FileSearchResponse>(
          [](FileDevice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rageam::remote::FileSearchRequest* req,
             ::grpc::ServerWriter<::rageam::remote::FileSearchResponse>* writer) {
               return service->Search(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileDevice_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileDevice::Service, ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileDevice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rageam::remote::FileExistsRequest* req,
             ::rageam::remote::FileExistResponse* resp) {
               return service->IsFileExists(ctx, req, resp);
             }, this)));
}

FileDevice::Service::~Service() {
}

::grpc::Status FileDevice::Service::ScanDirectory(::grpc::ServerContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileDevice::Service::Search(::grpc::ServerContext* context, const ::rageam::remote::FileSearchRequest* request, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileDevice::Service::IsFileExists(::grpc::ServerContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rageam
}  // namespace remote

