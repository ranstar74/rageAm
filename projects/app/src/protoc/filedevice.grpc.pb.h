// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: filedevice.proto
#ifndef GRPC_filedevice_2eproto__INCLUDED
#define GRPC_filedevice_2eproto__INCLUDED

#include "filedevice.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace rageam {
namespace remote {

class FileDevice final {
 public:
  static constexpr char const* service_full_name() {
    return "rageam.remote.FileDevice";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Pre-loads all packfiles (.RPF) in specified directory recursively, including nested archives
    virtual ::grpc::Status ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::rageam::remote::FileScanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileScanResponse>> AsyncScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileScanResponse>>(AsyncScanDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileScanResponse>> PrepareAsyncScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileScanResponse>>(PrepareAsyncScanDirectoryRaw(context, request, cq));
    }
    // Search algorithm that behaves the same way as search in any file explorer - performs search in specified directory with search pattern,
    // pattern might be in glob format ('*.ydr' / '*' / '*.y??'). If glob format is not specified, check that entry name string contains pattern is used instead
    std::unique_ptr< ::grpc::ClientReaderInterface< ::rageam::remote::FileSearchResponse>> Search(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::rageam::remote::FileSearchResponse>>(SearchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rageam::remote::FileSearchResponse>> AsyncSearch(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rageam::remote::FileSearchResponse>>(AsyncSearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rageam::remote::FileSearchResponse>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rageam::remote::FileSearchResponse>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    // Could be file or directory, including entries in packfiles
    virtual ::grpc::Status IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::rageam::remote::FileExistResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileExistResponse>> AsyncIsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileExistResponse>>(AsyncIsFileExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileExistResponse>> PrepareAsyncIsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileExistResponse>>(PrepareAsyncIsFileExistsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Pre-loads all packfiles (.RPF) in specified directory recursively, including nested archives
      virtual void ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search algorithm that behaves the same way as search in any file explorer - performs search in specified directory with search pattern,
      // pattern might be in glob format ('*.ydr' / '*' / '*.y??'). If glob format is not specified, check that entry name string contains pattern is used instead
      virtual void Search(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest* request, ::grpc::ClientReadReactor< ::rageam::remote::FileSearchResponse>* reactor) = 0;
      // Could be file or directory, including entries in packfiles
      virtual void IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileScanResponse>* AsyncScanDirectoryRaw(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileScanResponse>* PrepareAsyncScanDirectoryRaw(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::rageam::remote::FileSearchResponse>* SearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::rageam::remote::FileSearchResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::rageam::remote::FileSearchResponse>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileExistResponse>* AsyncIsFileExistsRaw(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rageam::remote::FileExistResponse>* PrepareAsyncIsFileExistsRaw(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::rageam::remote::FileScanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>> AsyncScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>>(AsyncScanDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>> PrepareAsyncScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>>(PrepareAsyncScanDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::rageam::remote::FileSearchResponse>> Search(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::rageam::remote::FileSearchResponse>>(SearchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>> AsyncSearch(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>>(AsyncSearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    ::grpc::Status IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::rageam::remote::FileExistResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>> AsyncIsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>>(AsyncIsFileExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>> PrepareAsyncIsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>>(PrepareAsyncIsFileExistsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response, std::function<void(::grpc::Status)>) override;
      void ScanDirectory(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Search(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest* request, ::grpc::ClientReadReactor< ::rageam::remote::FileSearchResponse>* reactor) override;
      void IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response, std::function<void(::grpc::Status)>) override;
      void IsFileExists(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>* AsyncScanDirectoryRaw(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileScanResponse>* PrepareAsyncScanDirectoryRaw(::grpc::ClientContext* context, const ::rageam::remote::FileScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::rageam::remote::FileSearchResponse>* SearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request) override;
    ::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::rageam::remote::FileSearchResponse>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::rageam::remote::FileSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>* AsyncIsFileExistsRaw(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rageam::remote::FileExistResponse>* PrepareAsyncIsFileExistsRaw(::grpc::ClientContext* context, const ::rageam::remote::FileExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ScanDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
    const ::grpc::internal::RpcMethod rpcmethod_IsFileExists_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Pre-loads all packfiles (.RPF) in specified directory recursively, including nested archives
    virtual ::grpc::Status ScanDirectory(::grpc::ServerContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response);
    // Search algorithm that behaves the same way as search in any file explorer - performs search in specified directory with search pattern,
    // pattern might be in glob format ('*.ydr' / '*' / '*.y??'). If glob format is not specified, check that entry name string contains pattern is used instead
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::rageam::remote::FileSearchRequest* request, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* writer);
    // Could be file or directory, including entries in packfiles
    virtual ::grpc::Status IsFileExists(::grpc::ServerContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanDirectory() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ScanDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanDirectory(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileScanRequest* /*request*/, ::rageam::remote::FileScanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanDirectory(::grpc::ServerContext* context, ::rageam::remote::FileScanRequest* request, ::grpc::ServerAsyncResponseWriter< ::rageam::remote::FileScanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileSearchRequest* /*request*/, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::rageam::remote::FileSearchRequest* request, ::grpc::ServerAsyncWriter< ::rageam::remote::FileSearchResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsFileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsFileExists() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_IsFileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFileExists(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileExistsRequest* /*request*/, ::rageam::remote::FileExistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsFileExists(::grpc::ServerContext* context, ::rageam::remote::FileExistsRequest* request, ::grpc::ServerAsyncResponseWriter< ::rageam::remote::FileExistResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ScanDirectory<WithAsyncMethod_Search<WithAsyncMethod_IsFileExists<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ScanDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanDirectory() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rageam::remote::FileScanRequest* request, ::rageam::remote::FileScanResponse* response) { return this->ScanDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_ScanDirectory(
        ::grpc::MessageAllocator< ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanDirectory(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileScanRequest* /*request*/, ::rageam::remote::FileScanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::rageam::remote::FileScanRequest* /*request*/, ::rageam::remote::FileScanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Search() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::rageam::remote::FileSearchRequest, ::rageam::remote::FileSearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rageam::remote::FileSearchRequest* request) { return this->Search(context, request); }));
    }
    ~WithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileSearchRequest* /*request*/, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::rageam::remote::FileSearchResponse>* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::rageam::remote::FileSearchRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsFileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsFileExists() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rageam::remote::FileExistsRequest* request, ::rageam::remote::FileExistResponse* response) { return this->IsFileExists(context, request, response); }));}
    void SetMessageAllocatorFor_IsFileExists(
        ::grpc::MessageAllocator< ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsFileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFileExists(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileExistsRequest* /*request*/, ::rageam::remote::FileExistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsFileExists(
      ::grpc::CallbackServerContext* /*context*/, const ::rageam::remote::FileExistsRequest* /*request*/, ::rageam::remote::FileExistResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ScanDirectory<WithCallbackMethod_Search<WithCallbackMethod_IsFileExists<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ScanDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanDirectory() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ScanDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanDirectory(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileScanRequest* /*request*/, ::rageam::remote::FileScanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileSearchRequest* /*request*/, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsFileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsFileExists() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_IsFileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFileExists(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileExistsRequest* /*request*/, ::rageam::remote::FileExistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanDirectory() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ScanDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanDirectory(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileScanRequest* /*request*/, ::rageam::remote::FileScanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileSearchRequest* /*request*/, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsFileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsFileExists() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_IsFileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFileExists(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileExistsRequest* /*request*/, ::rageam::remote::FileExistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsFileExists(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanDirectory() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanDirectory(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileScanRequest* /*request*/, ::rageam::remote::FileScanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Search() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Search(context, request); }));
    }
    ~WithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileSearchRequest* /*request*/, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsFileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsFileExists() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsFileExists(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsFileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsFileExists(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileExistsRequest* /*request*/, ::rageam::remote::FileExistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsFileExists(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanDirectory() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rageam::remote::FileScanRequest, ::rageam::remote::FileScanResponse>* streamer) {
                       return this->StreamedScanDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanDirectory(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileScanRequest* /*request*/, ::rageam::remote::FileScanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rageam::remote::FileScanRequest,::rageam::remote::FileScanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsFileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsFileExists() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rageam::remote::FileExistsRequest, ::rageam::remote::FileExistResponse>* streamer) {
                       return this->StreamedIsFileExists(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsFileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsFileExists(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileExistsRequest* /*request*/, ::rageam::remote::FileExistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsFileExists(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rageam::remote::FileExistsRequest,::rageam::remote::FileExistResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ScanDirectory<WithStreamedUnaryMethod_IsFileExists<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::rageam::remote::FileSearchRequest, ::rageam::remote::FileSearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::rageam::remote::FileSearchRequest, ::rageam::remote::FileSearchResponse>* streamer) {
                       return this->StreamedSearch(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::rageam::remote::FileSearchRequest* /*request*/, ::grpc::ServerWriter< ::rageam::remote::FileSearchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::rageam::remote::FileSearchRequest,::rageam::remote::FileSearchResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Search<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ScanDirectory<WithSplitStreamingMethod_Search<WithStreamedUnaryMethod_IsFileExists<Service > > > StreamedService;
};

}  // namespace remote
}  // namespace rageam


#endif  // GRPC_filedevice_2eproto__INCLUDED
